{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onSubmit","e","preventDefault","data","state","name","refs","value","age","act","dataObj","push","index","setState","myForm","reset","focus","onDelete","i","splice","onEdit","title","this","className","ref","type","placeholder","onClick","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAkGeA,G,kBA7Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAaRC,SAAW,SAAAC,GACTA,EAAEC,iBAEF,IAAIC,EAAO,EAAKC,MAAMD,KAClBE,EAAO,EAAKC,KAAKD,KAAKE,MACtBC,EAAM,EAAKF,KAAKE,IAAID,MAExB,GAAuB,IAAnB,EAAKH,MAAMK,IAAW,CACxB,IAAIC,EAAU,CACZL,OAAMG,OAGRL,EAAKQ,KAAKD,OAGP,CACH,IAAIE,EAAQ,EAAKR,MAAMQ,MACvBT,EAAKS,GAAOP,KAAOA,EACnBF,EAAKS,GAAOJ,IAAMA,EAGpB,EAAKK,SAAS,CACZV,KAAMA,EACNM,IAAK,IAGP,EAAKH,KAAKQ,OAAOC,QACjB,EAAKT,KAAKD,KAAKW,SAzCE,EA4CnBC,SAAW,SAAAC,GACT,IAAIf,EAAO,EAAKC,MAAMD,KACtBA,EAAKgB,OAAOD,EAAG,GAEf,EAAKL,SAAS,CACZV,KAAMA,IAGR,EAAKG,KAAKQ,OAAOC,QACjB,EAAKT,KAAKD,KAAKW,SArDE,EAwDnBI,OAAS,SAAAF,GACP,IAAIf,EAAO,EAAKC,MAAMD,KAAKe,GAC3B,EAAKZ,KAAKD,KAAKE,MAAQJ,EAAKE,KAC5B,EAAKC,KAAKE,IAAID,MAAQJ,EAAKK,IAE3B,EAAKK,SAAS,CACZJ,IAAK,EACLG,MAAOM,IAGT,EAAKZ,KAAKD,KAAKW,SAhEf,EAAKZ,MAAQ,CACXiB,MAAM,OACNZ,IAAK,EACLG,MAAM,GACNT,KAAM,IANS,E,iFAWjBmB,KAAKhB,KAAKD,KAAKW,U,+BA0DP,IAAD,SACiBM,KAAKlB,MAArBiB,EADD,EACCA,MAAOlB,EADR,EACQA,KACf,OACE,yBAAKoB,UAAU,OACb,wBAAIA,UAAU,SAAUF,GACxB,0BAAMG,IAAI,SAASD,UAAU,UAC3B,2BAAOE,KAAK,OAAOD,IAAI,OAAOE,YAAY,YAAYH,UAAU,cAChE,2BAAOE,KAAK,OAAOD,IAAI,MAAME,YAAY,WAAWH,UAAU,cAC9D,4BAAQI,QAAU,SAAA1B,GAAC,OAAI,EAAKD,SAASC,IAAKsB,UAAU,YAApD,WAEF,6BACIpB,EAAKyB,KAAI,SAACzB,EAAMe,GAAP,OACT,wBAAIW,IAAMX,EAAIK,UAAU,UACpBL,EAAI,EADR,KACef,EAAKE,KADpB,KAC8BF,EAAKK,IACjC,4BAAQmB,QAAU,kBAAM,EAAKV,SAASC,IAAKK,UAAU,gBAArD,UACA,4BAAQI,QAAU,kBAAM,EAAKP,OAAOF,IAAKK,UAAU,gBAAnD,kB,GAtFIO,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.85f794ac.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: `CRUD`,\n      act: 0,\n      index: ``,\n      data: []\n    }\n  } \n\n  componentDidMount() {\n    this.refs.name.focus()\n  }\n\n  onSubmit = e => {\n    e.preventDefault()\n\n    let data = this.state.data\n    let name = this.refs.name.value\n    let age = this.refs.age.value\n\n    if (this.state.act === 0) {\n      let dataObj = {\n        name, age\n      }\n\n      data.push(dataObj)\n    }\n    \n    else {\n      let index = this.state.index\n      data[index].name = name\n      data[index].age = age\n    }    \n\n    this.setState({\n      data: data,\n      act: 0\n    })\n\n    this.refs.myForm.reset()\n    this.refs.name.focus()\n  }\n\n  onDelete = i => {\n    let data = this.state.data\n    data.splice(i, 1)\n    \n    this.setState({\n      data: data\n    })\n\n    this.refs.myForm.reset()\n    this.refs.name.focus()\n  }\n\n  onEdit = i => {\n    let data = this.state.data[i]\n    this.refs.name.value = data.name\n    this.refs.age.value = data.age\n\n    this.setState({\n      act: 1,\n      index: i\n    })\n\n    this.refs.name.focus()\n  }  \n\n  render() {\n    const { title, data } = this.state\n    return (\n      <div className=\"App\">\n        <h2 className=\"title\">{ title }</h2>\n        <form ref=\"myForm\" className=\"myForm\">\n          <input type=\"text\" ref=\"name\" placeholder=\"Your Name\" className=\"formField\" />\n          <input type=\"text\" ref=\"age\" placeholder=\"Your Age\" className=\"formField\" />\n          <button onClick={ e => this.onSubmit(e) } className=\"myButton\">SUBMIT</button>\n        </form>\n        <pre>\n          { data.map((data, i) =>\n            <li key={ i } className=\"myList\">\n              { i + 1 }. { data.name }, { data.age }\n              <button onClick={ () => this.onDelete(i) } className=\"myListButton\">DELETE</button>\n              <button onClick={ () => this.onEdit(i) } className=\"myListButton\">EDIT</button>\n            </li>\n          ) }\n        </pre>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}